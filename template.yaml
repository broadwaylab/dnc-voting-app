AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  voting-app

  Sample SAM Template for voting-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    Handler: app.lambda_handler
    Runtime: python3.8
    Environment: 
      Variables:
        DYNAMO_TABLE_NAME: voting-app
        TWILIO_AUTH_TOKEN: <Twilio Auth Token>
        TWILIO_ACCOUNT_SID: <Twilio Account Sid>
        TWILIO_PHONE_NUMBER: <Twilio Phone Number>

Resources:
  # IAM Roles

  MessageWebhookFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
            Version: '2012-10-17'
          PolicyName: LambdaLogging
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource: !GetAtt DynamoDBTable.Arn
            Version: '2012-10-17'
          PolicyName: DynamoDBAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Effect: Allow
                Resource: !GetAtt DynamoDBTable.StreamArn
            Version: '2012-10-17'
          PolicyName: StreamAccess
  
  AppApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Demo
      Cors: "'*'"

  # Processes incoming message
  MessageWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/process_message/
      Role: !GetAtt MessageWebhookFunctionExecutionRole.Arn
      Events:
        MessageWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref AppApi
            Path: /message_webhook
            Method: post
            RequestParameters: 
              method.request.header.X-Twilio-Signature: true
          Integration:
            Type: AWS
            IntegrationHttpMethod: POST
            RequestTemplates: 
              "application/json": "{
                #set($httpPost = $input.path('$').split(\"&\"))
                {
                \"twilioSignature\": \"$input.params('X-Twilio-Signature')\",
                #foreach( $kvPair in $httpPost )
                 #set($kvTokenised = $kvPair.split(\"=\"))
                 #if( $kvTokenised.size() > 1 )
                   \"$kvTokenised[0]\" : \"$kvTokenised[1]\"#if( $foreach.hasNext ),#end
                 #else
                   \"$kvTokenised[0]\" : \"\"#if( $foreach.hasNext ),#end
                 #end
                #end
                }  
              }"

  # Stream that reads votes and increments count in real time. 
  DynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dynamodb_stream/
      Role: !GetAtt MessageWebhookFunctionExecutionRole.Arn
      Policies: AWSLambdaDynamoDBExecutionRole # Permission to read from dynamodb streams. 
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBTable.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: voting-app
      AttributeDefinitions: 
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema: 
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AppApi:
    Description: "API Gateway endpoint URL for for SMS webhooks."
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/Demo/message_webhook/"
